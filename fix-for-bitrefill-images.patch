diff --git a/CakeWallet/Lib/Queue.swift b/CakeWallet/Lib/Queue.swift
index 9031935..8f5fd78 100644
--- a/CakeWallet/Lib/Queue.swift
+++ b/CakeWallet/Lib/Queue.swift
@@ -2,3 +2,4 @@ import Foundation
 
 let workQueue = DispatchQueue(label: "app.cakewallet.work-queue", qos: .default, attributes: DispatchQueue.Attributes.concurrent)
 let updateQueue = DispatchQueue(label: "app.cakewallet.update-queue", qos: .background, attributes: DispatchQueue.Attributes.concurrent)
+let fileDownloadingQueue = DispatchQueue(label: "app.cakewallet.fileDownloadingQueue", qos: .default, attributes: DispatchQueue.Attributes.concurrent)
diff --git a/CakeWallet/Screens/BItrefill/BitrefillProduct/BitrefillProduct.swift b/CakeWallet/Screens/BItrefill/BitrefillProduct/BitrefillProduct.swift
index 47396bc..529da90 100644
--- a/CakeWallet/Screens/BItrefill/BitrefillProduct/BitrefillProduct.swift
+++ b/CakeWallet/Screens/BItrefill/BitrefillProduct/BitrefillProduct.swift
@@ -1,7 +1,8 @@
 import UIKit
 import FlexLayout
 import SwiftyJSON
-
+import Alamofire
+import SwiftSVG
 
 extension UIImageView {
     func downloaded(from url: URL, contentMode mode: UIViewContentMode = .scaleAspectFit) {
@@ -26,42 +27,71 @@ extension UIImageView {
 
 
 final class BitrefillProductTableCell: FlexCell {
-    let contentHolder = UIView()
-    let name = UILabel()
+    private static let imageSize = CGSize(width: 35, height: 35)
+    private static var defaultThumbnail: UIImage = {
+        return UIImage(named: "placeholder")!.resized(to: BitrefillProductTableCell.imageSize)
+    }()
+    
+    let contentHolder: UIView
+    let name: UILabel
+    let imageContainer: UIView
     
-    var image2 = UIImageView()
-
     override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
+        contentHolder = UIView()
+        name = UILabel()
+        imageContainer = UIView()
         super.init(style: style, reuseIdentifier: reuseIdentifier)
     }
     
     func configure(name: String, logoImageURL: String) {
         self.name.text = name
+        self.addImageView(image: BitrefillProductTableCell.defaultThumbnail)
     
-        image2.image = UIImage(named: "placeholder")
-        
-//        if let ur = URL(string: logoImageURL) {
-//            print("logoImageURL", logoImageURL)
-//            print("==========================")
-//
-//
-//            let data = try? Data(contentsOf: ur)
-//
-//            if let imageData = data {
-//                image2.image = UIImage(data: imageData)
-//            } else {
-//                print("HELLO IM LOADING SOMETHING ELSE ")
-//                print("================================")
-//            }
-//        }
+        fileDownloadingQueue.async {
+            if let url = URL(string: logoImageURL) {
+                do {
+                    let data = try Data(contentsOf: url)
+                    
+                    DispatchQueue.main.async {
+                        if let image = UIImage(data: data)?.resized(to: BitrefillProductTableCell.imageSize) {
+                            self.addImageView(image: image)
+                        } else {
+                            self.addSVGImageView(data: data)
+                        }
+                    }
+                } catch {
+                    print(String(format: "Error: failed loading logo image for: %@. \n %@", name, error.localizedDescription))
+                }
+            }
+        }
         
         self.name.flex.markDirty()
         contentView.flex.layout()
     }
     
+    func addSVGImageView(data: Data) {
+        let svgView =  UIView(SVGData: data) { layer in
+            layer.resizeToFit(CGRect(origin: .zero, size: BitrefillProductTableCell.imageSize))
+        }
+        svgView.tag = 1101
+        removeInnerImageContainer()
+        imageContainer.addSubview(svgView)
+    }
+    
+    func addImageView(image: UIImage) {
+        let imageView = UIImageView(image: image)
+        imageView.tag = 1102
+        removeInnerImageContainer()
+        imageContainer.addSubview(imageView)
+    }
+    
+    func removeInnerImageContainer() {
+        imageContainer.viewWithTag(1102)?.removeFromSuperview()
+        imageContainer.viewWithTag(1101)?.removeFromSuperview()
+    }
+    
     override func configureView() {
         super.configureView()
-        
         name.font = applyFont(ofSize: 17)
         selectionStyle = .none
     }
@@ -76,7 +106,7 @@ final class BitrefillProductTableCell: FlexCell {
             .paddingHorizontal(25)
             .backgroundColor(.white)
             .define{ flex in
-                flex.addItem(image2).width(35).height(35)
+                flex.addItem(imageContainer).size(BitrefillProductTableCell.imageSize)
                 flex.addItem(name).marginLeft(30)
         }
         
@@ -92,6 +122,13 @@ final class BitrefillProductTableCell: FlexCell {
 
 
 struct BitrefillProduct: Codable, JSONInitializable {
+    private static func urlForLogo(withName name: String, andBackgrould backgroud: String) -> String {
+        return String(
+            format: "https://www.bitrefill.com/content/cn/b_rgb:%@,c_pad,d_operator.png,h_35,w_35/%@",
+            backgroud,
+            name)
+    }
+    
     let type: String
     let slug: String
     let name: String
@@ -101,7 +138,10 @@ struct BitrefillProduct: Codable, JSONInitializable {
         type = json["type"].stringValue
         slug = json["slug"].stringValue
         name = json["name"].stringValue
-        logoImageURL = json["logoImage"].stringValue
+        let logoBackground = String(json["logoBackground"].stringValue.dropFirst())
+        logoImageURL = BitrefillProduct.urlForLogo(
+            withName: json["logoBaseImage"].stringValue,
+            andBackgrould: logoBackground)
     }
 }
 
